@page "/edit-todo/{Id:guid}"

@using TodoApp.Models
@using TodoBlazor.Services
@inject ITodoService TodoService
@inject NavigationManager Navigation

<PageTitle>Edit Todo</PageTitle>

<div class="container mt-4">
    <h2>Edit Todo</h2>
    
    @if (isLoading)
    {
        <div class="text-center my-5">
            <span>Loading...</span>
        </div>
    }
    else
    {
        <form @onsubmit="EditTodoAsync"> 
            <div class="mb-3">
                <label class="form-label">Title *</label>
                <input class="form-control" @bind="todo.Title" required maxlength="100" />
            </div>
            <div class="mb-3">
                <label class="form-label">Description</label>
                <textarea class="form-control" @bind="todo.Description" rows="3" placeholder="Optional description"></textarea>
            </div>
            <div class="mb-3">
                <label class="form-label">Due Date</label>
                <input type="date" class="form-control" @bind="todo.DueDate" />
            </div>
            <div class="mb-3">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" @bind="todo.IsCompleted" id="isCompleted" />
                    <label class="form-check-label" for="isCompleted">
                        Mark as completed
                    </label>
                </div>
            </div>
            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary flex-grow-1">Save Changes</button>
                <button type="button" class="btn btn-secondary" @onclick="@OnCancel">
                    Cancel
                </button>
            </div>
        </form>
    }
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }
    private TodoItem todo = new();
    private bool isLoading = true;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            todo = await TodoService.Get(Id);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task EditTodoAsync()
    {
        try
        {
            await TodoService.Update(todo);
            Navigation.NavigateTo("/");
        }
        catch
        {
            Console.WriteLine("Error updating todo");
        }
    }

    private void OnError(Exception ex)
    {
        Console.WriteLine("Error updating todo");
    }

    private void OnCancel()
    {
        Navigation.NavigateTo("/");
    }
}