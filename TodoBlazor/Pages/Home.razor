@page "/"
@using TodoBlazor.Services
@using TodoApp.Models
@inject ITodoService TodoService
@inject NavigationManager Navigation

<PageTitle>Todo List</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Todo List</h2>
        <div class="d-flex justify-content-end" style="gap: 10px;">
            <button type="button" class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/add-todo"))">
                Add Todo
            </button>
            <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="ClearFiltersAsync">
                Clear Filters
            </button>
        </div>
    </div>

    <div class="card-header">
        <h5 class="mb-0">Filters</h5>
    </div>

    <div class="row">
        <div class="col-md-2">
            <label class="form-label">Title Contains:</label>
            <input type="text" class="form-control" @bind="_filterTitle" @bind:after="OnFilterChangedAsync"
                   placeholder="Search title"/>
        </div>

        <div class="col-md-2">
            <label class="form-label">Status:</label>
            <select class="form-select" @onchange="OnFilterIsCompletedChangedAsync">
                <option value="">All</option>
                <option value="false">Not Completed</option>
                <option value="true">Completed</option>
            </select>
        </div>

        <div class="col-md-2">
            <label class="form-label">Due From:</label>
            <input type="date" class="form-control" @bind="_filterDueFrom" @bind:after="OnFilterChangedAsync"/>
        </div>
        <div class="col-md-2">
            <label class="form-label">Due To:</label>
            <input type="date" class="form-control" @bind="_filterDueTo" @bind:after="OnFilterChangedAsync"/>
        </div>
        <div class="col-md-2">
            <label class="form-label">Created From:</label>
            <input type="date" class="form-control" @bind="_filterCreatedFrom" @bind:after="OnFilterChangedAsync"/>
        </div>
        <div class="col-md-2">
            <label class="form-label">Created To:</label>
            <input type="date" class="form-control" @bind="_filterCreatedTo" @bind:after="OnFilterChangedAsync"/>
        </div>
    </div>

    <div class="row mt-2 mb-3">
        <div class="col-md-4">
            <label class="form-label">Sort By:</label>
            <select class="form-select" @bind="_currentSortBy" @bind:after="OnSortChangedAsync">
                <option value="createdAt">Created Date</option>
                <option value="dueDate">Due Date</option>
                <option value="title">Title</option>
                <option value="isCompleted">Completion Status</option>
            </select>
        </div>
        <div class="col-md-3">
            <label class="form-label">Order:</label>
            <select class="form-select" @bind="_currentSortOrder" @bind:after="OnSortChangedAsync">
                <option value="asc">Ascending</option>
                <option value="desc">Descending</option>
            </select>
        </div>
    </div>

    @if (_isLoading)
    {
        <div class="text-center my-5">
            <div class="spinner-border"></div>
        </div>
    }
    else if (_todos.Any())
    {
        <div class="d-flex mb-2">
            <span class="text-muted">Showing @_todos.Count todo(s)</span>
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                <tr>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Created At</th>
                    <th>Due Date</th>
                    <th>Completed</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var todo in _todos)
                {
                    <tr>
                        <td>@todo.Title</td>
                        <td class="text-wrap text-break text-truncate" style="max-width: 200px;">
                            @todo.Description
                        </td>
                        <td>@todo.CreatedAt.ToString("yyyy-MM-dd")</td>
                        <td>@(todo.DueDate.HasValue ? todo.DueDate.Value.ToString("yyyy-MM-dd") : "-")</td>
                        <td>
                            @if (todo.IsCompleted)
                            {
                                <span class="badge bg-success">Completed</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Not Completed</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-sm btn-info" @onclick="@(() => ViewTodoAsync(todo))">View</button>
                            <button class="btn btn-sm btn-warning" @onclick="@(() => EditTodoAsync(todo.Id))">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteTodoAsync(todo.Id))">Delete</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="text-center text-muted my-5">
            <p class="mt-2">No todos yet.</p>
        </div>
    }
</div>

@code {
    private List<TodoItem> _todos = new();
    private bool _isLoading = true;

    // sorting
    private string _currentSortBy = "createdAt";
    private string _currentSortOrder = "asc";

    // filtering
    private string? _filterTitle;
    private bool? _filterIsCompleted;
    private DateTime? _filterDueFrom;
    private DateTime? _filterDueTo;
    private DateTime? _filterCreatedFrom;
    private DateTime? _filterCreatedTo;

    protected override async Task OnInitializedAsync()
    {
        await LoadTodos();
    }

    private async Task LoadTodos()
    {
        _isLoading = true;
        try
        {
            _todos = await TodoService.GetAll(
                isCompleted: _filterIsCompleted,
                dueFrom: _filterDueFrom,
                dueTo: _filterDueTo,
                createdFrom: _filterCreatedFrom,
                createdTo: _filterCreatedTo,
                title: string.IsNullOrWhiteSpace(_filterTitle) ? null : _filterTitle,
                sortBy: _currentSortBy,
                sortOrder: _currentSortOrder
            );
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OnFilterIsCompletedChangedAsync(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();

        if (string.IsNullOrWhiteSpace(value))
        {
            _filterIsCompleted = null;
        }
        else if (bool.TryParse(value, out var parsed))
        {
            _filterIsCompleted = parsed;
        }

        await LoadTodos();
    }

    private async Task OnSortChangedAsync() => await LoadTodos();
    private async Task OnFilterChangedAsync() => await LoadTodos();

    private async Task ClearFiltersAsync()
    {
        _filterTitle = null;
        _filterIsCompleted = null;
        _filterDueFrom = null;
        _filterDueTo = null;
        _filterCreatedFrom = null;
        _filterCreatedTo = null;
        await LoadTodos();
    }

    private async Task DeleteTodoAsync(Guid id)
    {
        _isLoading = true;
        try
        {
            await TodoService.Delete(id);
            await LoadTodos();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ViewTodoAsync(TodoItem todo)
    {
        Navigation.NavigateTo($"/details/{todo.Id}");
    }

    private void EditTodoAsync(Guid id)
    {
        Navigation.NavigateTo($"/edit-todo/{id}");
    }
}
